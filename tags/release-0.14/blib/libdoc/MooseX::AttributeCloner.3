.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MooseX::AttributeCloner 3"
.TH MooseX::AttributeCloner 3 "2009-11-17" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::AttributeCloner
.SH "VERSION"
.IX Header "VERSION"
\&\f(CW$LastChangedRevision\fR$
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  package My::Class;
\&  use Moose;
\&  with qw{MooseX::AttributeCloner};
\&
\&  my $NewClassObject = $self\->new_with_cloned_attributes(q{New::Class}, {});
\&  1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The purpose of this Role is to take all the attributes which have values in the current class,
and populate them directly into a new class object. The purpose of which is that if you have data
inputted on the command line that needs to propagate through to later class objects, you shouldn't
need to do the following
.PP
.Vb 5
\&  my $oNewClass = New::Class\->new({
\&    attr1 => $self\->attr1,
\&    attr2 => $self\->attr2,
\&    ...
\&  });
.Ve
.PP
Which is going to get, quite frankly, tedious in the extreme. Particularly when you have more 2 class
objects in your chain.
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.Sh "new_with_cloned_attributes"
.IX Subsection "new_with_cloned_attributes"
This takes a package name as the first argument, plus an optional additional \f(CW$arg_refs\fR hash. It will
return a class object of the package populated with any matching attribute data from the current object,
plus anything in the \f(CW$arg_refs\fR hash.
.Sh "attributes_as_command_options"
.IX Subsection "attributes_as_command_options"
returns all the built attributes that are not objects as a string of command_line options
only the first level of references will be passed through, multi-dimensional data structures
should use the json serialisation option and deserialise it on object construction or script
running
.PP
.Vb 2
\&  my $command_line_string = $class\->attributes_as_command_options();
\&  \-\-attr1 val1 \-\-attr2 val2
.Ve
.PP
By default, it returns the options with a double dash, space separated, and not quoted (as above). These can be switched by submitting a hash_ref as follows
.PP
.Vb 5
\&  my $command_line_string = $class\->attributes_as_command_options({
\&    equal => 1,
\&    quotes => 1,
\&    single_dash => 1,
\&  });
.Ve
.PP
Although, if you are passing a hash_ref, this will always be space separated attr val.
.PP
No additional command_line params can be pushed into this, it only deals with the attributes already set in the current object
.PP
Note, it is your responsibility to know where you may need any of these to be on or off, as it is an all or nothing approach
.Sh "attributes_as_json"
.IX Subsection "attributes_as_json"
returns all the built attributes that are not objects as a \s-1JSON\s0 string
.PP
.Vb 1
\&  my $sAttributesAsJSON = $class\->attributes_as_json();
.Ve
.Sh "attributes_as_escaped_json"
.IX Subsection "attributes_as_escaped_json"
as attributes_as_json, except it is an escaped \s-1JSON\s0 string, so that this could be used on a command line
.PP
.Vb 1
\&  my $sAttributesAsEscapedJSON = $class\->attributes_as_escaped_json();
.Ve
.PP
This uses \s-1JSON\s0 to generate the string, removing any objects before stringifying, and then parses it through a regex to generate a string with escaped characters
Note, because objects are removed, arrays will remain the correct length, but have null in them
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.IP "Moose::Role" 4
.IX Item "Moose::Role"
.PD 0
.IP "Carp" 4
.IX Item "Carp"
.IP "English \-no_match_vars" 4
.IX Item "English -no_match_vars"
.IP "Readonly" 4
.IX Item "Readonly"
.IP "\s-1JSON\s0" 4
.IX Item "JSON"
.PD
.SH "INCOMPATIBILITIES"
.IX Header "INCOMPATIBILITIES"
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
This is more than likely to have bugs in it. Please contact me with any you find (or submit to \s-1RT\s0)
and any patches.
.SH "AUTHOR"
.IX Header "AUTHOR"
setitesuk
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (C) 2009 Andy Brown (setitesuk@gmail.com)
.PP
This program is free software: you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
